{"version":3,"sources":["assets/virus.png","components/header/Header.jsx","components/leftSidebar/Country.jsx","components/leftSidebar/Countries.jsx","components/rightSidebar/LineGraph.jsx","components/rightSidebar/Graphs.jsx","components/center/UseResizeObserver.jsx","components/center/Center.jsx","data/jhu.csv","data/vaccineDailyReport.csv","components/dashboard/Dashboard.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","id","src","virusIcon","className","Country","country","handleClick","selected","onClick","cases","toLocaleString","deaths","Countries","data","map","LineGraph","jhuData","type","loc","owi","rollUpOwidLineGraph","dataType","location","format","filter","d","all","Object","entries","err","dateformat","color","graphType","titleText","prop","date","Date","console","log","div","d3","height","width","margin","top","right","bottom","left","shift","i","X","Y","parseInt","I","length","svg","append","attr","xScale","domain","range","xAxis","ticks","tickSizeOuter","yScale","yAxis","call","g","text","selectAll","clone","line","x","y","linegraph","useEffect","style","marginBottom","Graphs","jhu","useState","Grid","uuidv4","seriesConfirmed","seriesDeaths","seriesVaccineDoses","UseResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","forEach","entry","contentRect","observe","unobserve","Center","countries","worldMap","selectedCountry","setWidth","setHeight","React","value","setValue","svgRef","useRef","wrapperRef","a11yProps","index","prototype","last","this","nodes","size","getBoundingClientRect","f","projection","fitSize","worldData","precision","pathGenerator","colorType","colorRange","minType","dosesAdmin","population","maxType","colorScale","tooltip","features","join","on","window","event","path","__data__","properties","name","transition","duration","iso3","find","c","undefined","getCountryValue","iso_a3","legendLinear","legend","legendColor","shapeWidth","cells","orient","scale","each","label","t","parseFloat","replace","Box","sx","display","alignItems","justifyContent","textAlign","padding","backgroundColor","Tabs","textColor","onChange","newValue","Tab","Dashboard","dailyReport","seriesCases","seriesVaccines","seriesRecovered","UID_ISO_FIPS_LookUp_Table","setjhuData","setSelected","Promise","jhuDailyReports","vaccineDailyReport","then","loadData","jhuCases","v","Confirmed","Country_Region","jhuDeaths","Deaths","jhuRecovered","Recovered","jhuIncidentRate","Incident_Rate","jhuCaseFatalityRatio","Case_Fatality_Ratio","jhuDosesAdministered","Doses_admin","jhuPartiallyVaccinated","People_partially_vaccinated","jhuFullyVaccinated","People_fully_vaccinated","tempArr","k","push","get","recovered","incidentRate","caseFatalityRatio","partiallyVacc","fullyVacc","Population","long","Long_","lat","Lat","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","primary","main","ReactDOM","render","ThemeProvider","StrictMode","document","getElementById"],"mappings":"2XAAe,G,OAAA,IAA0B,mC,OC6B1BA,MAzBf,WACE,OACE,qBAAKC,GAAG,SAAR,SACE,sBAAKA,GAAG,gBAAR,UACE,qBAAKC,IAAKC,IACV,oBAAIC,UAAU,cAAd,mC,OCuBOC,MA7Bf,YAAsD,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAQvC,OACE,qBACEJ,UAAS,kBAAaI,IAAaF,EAAQA,QAAU,YAAc,IACnEG,QARJ,WAEEF,EAAYD,EAAQA,UAIpB,SAIE,sBAAKF,UAAU,mBAAf,UACE,6BAAKE,EAAQA,UACb,sBAAKF,UAAU,sBAAf,UACE,oBAAGA,UAAU,4BAAb,oBACUE,EAAQI,MAAMC,eAAe,YAEvC,kCACA,oBAAGP,UAAU,6BAAb,qBACSE,EAAQM,OAAOD,eAAe,qB,OCPlCE,MAbf,YAAqD,IAAhCC,EAA+B,EAA/BA,KAAMP,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SACtC,OAAOM,EAAKC,KAAI,SAACT,GACf,OACE,cAAC,EAAD,CACEE,SAAUA,EACVD,YAAaA,EAEbD,QAASA,GADJA,EAAQA,a,cCsLNU,MA7Lf,YAAiD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,KAAWC,GAAO,EAAZC,IAAY,EAAPD,KAgBvC,SAASE,EAAoBC,EAAUC,EAAUL,GAC/C,IAAIM,EAGFA,EADW,aAATN,EACO,iBAEA,iBAGX,IAAMJ,EAAOQ,EAASG,QAAO,SAACC,GAAD,OAAOA,EAAEF,KAAYD,KAC9CI,EAAM,KACV,IACEA,EAAMC,OAAOC,QAAQf,EAAK,IAC1B,MAAOgB,GACP,OAAOA,EASLH,GAQN,SAAmBb,EAAMS,EAAUQ,EAAYC,EAAOd,GAAM,MAOtDe,EACAC,EARsD,cAEvCpB,GAFuC,IAE1D,2BAAyB,CAAC,IAAfqB,EAAc,QACvBA,EAAKC,KAAO,IAAIC,KAAKF,EAAKC,OAH8B,8BAU9C,SAARlB,GACFe,EAAY,eAAiBf,EAC7BgB,EAAY,cACK,UAARhB,GACTe,EAAY,eAAiBf,EAC7BgB,EAAY,UACK,YAARhB,GACTe,EAAY,eAAiBf,EAC7BgB,EAAY,gBAEZI,QAAQC,IAAI,sBAGd,IAAIC,EAAMC,IAAUR,GAUdS,EAAS,IACTC,EAAQ,IACRC,EAAS,CACbC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAGR,GAAY,SAAR9B,GAA2B,UAARA,EACrBJ,EAAKmC,QACLnC,EAAKmC,QACLnC,EAAKmC,QACLnC,EAAKmC,aAEL,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBpC,EAAKmC,QAIT,IAAME,EAAIV,IAAO3B,GAAM,SAACY,GACtB,OAAO,IAAIW,KAAKX,EAAE,OAGd0B,EAAIX,IAAO3B,GAAM,SAACY,GACtB,MAAa,KAATA,EAAE,GACG,EAEA2B,SAAS3B,EAAE,OAIhB4B,EAAIb,IAASU,EAAEI,QAEjBC,EAAMhB,EACPiB,OAAO,OACPC,KAAK,QAASf,GACde,KAAK,SAAUhB,GACfgB,KAAK,UAAW,CAAC,EAAG,EAAGf,EAAOD,IAC9BgB,KAAK,QAAS,qDAEXC,EAASlB,MAEZmB,OAAOnB,IAAUU,IACjBU,MAAM,CAACjB,EAAOI,KAAML,EAAQC,EAAOE,QAChCgB,EAAQrB,IAAckB,GAAQI,MAAM,GAAGC,cAAc,GAErDC,EAASxB,MAEZmB,OAAO,CAAC,EAAGnB,IAAOW,KAClBS,MAAM,CAACnB,EAASE,EAAOG,OAAQH,EAAOC,MAEnCqB,EAAQzB,IAAYwB,GAAQF,MAAM,IAAIC,cAAc,GAE1DR,EACGC,OAAO,KACPC,KAAK,YAFR,sBAEoChB,EAASE,EAAOG,OAFpD,MAGGoB,KAAKL,GACLK,MAAK,SAACC,GAAD,OACJA,EACGX,OAAO,QACPC,KAAK,IAAKf,EAAQC,EAAOE,OACzBY,KAAK,IAAKd,EAAOG,QACjBW,KAAK,OAAQ,gBACbA,KAAK,cAAe,SACpBW,KAAK,WAGZb,EACGC,OAAO,KACPC,KAAK,YAFR,oBAEkCd,EAAOI,KAFzC,QAGGmB,KAAKD,GAELC,MAAK,SAACC,GAAD,OACJA,EACGE,UAAU,cACVC,QACAb,KAAK,KAAMf,EAAQC,EAAOI,KAAOJ,EAAOE,OACxCY,KAAK,iBAAkB,OAE3BS,MAAK,SAACC,GAAD,OACJA,EACGX,OAAO,QACPC,KAAK,KAAMd,EAAOI,MAClBU,KAAK,IAAK,IACVA,KAAK,OAAQ,gBACbA,KAAK,cAAe,SACpBW,KAAKnC,MAGZ,IAAMsC,EAAO/B,MAEVgC,GAAE,SAACvB,GAAD,OAAOS,EAAOR,EAAED,OAClBwB,GAAE,SAACxB,GAAD,OAAOe,EAAOb,EAAEF,OAErBM,EACGC,OAAO,QACPC,KAAK,OAAQ,QACbA,KAAK,SAAU1B,GACf0B,KAAK,eAAgB,KACrBA,KAAK,iBAAkB,SACvBA,KAAK,kBAAmB,SACxBA,KAAK,iBAAkB,GACvBA,KAAK,IAAKc,EAAKlB,IA/IhBqB,CAAUhD,EAAKJ,EAAU,EAPhB,UAATL,EACI,UACS,WAATA,EACA,UACA,UAGwCA,GAkJhD,OAzLA0D,qBAAU,WACI,SAAR1D,GAAmBD,EAAQsC,OAAS,GACtClC,EAAoBJ,EAASE,EAAKD,GAGxB,UAARA,GAAoBD,EAAQsC,OAAS,GACvClC,EAAoBJ,EAASE,EAAKD,GAGxB,YAARA,GAAsBD,EAAQsC,OAAS,GACzClC,EAAoBJ,EAASE,EAAKD,KAEnC,IA6KI,qBAAK2D,MAAO,CAAEC,aAAc,QAAU7E,GAAE,qBAAgBiB,M,6CC5FlD6D,MAtFf,YAA6C,IAA3B9D,EAA0B,EAA1BA,QAAmBE,GAAO,EAAjBC,IAAiB,EAAZ4D,IAAY,EAAP7D,KACnC,EAA0B8D,mBAAS,GAAnC,mBAuDA,OAvDA,UAyCGC,EAAA,EACEA,EAAA,EACiBC,cAEjBD,EAAA,EACiBC,cAGjBD,EAAA,EACiBC,cAMpB,sBAAKlF,GAAG,kBAAR,UACGgB,GACC,cAAC,EAAD,CAEEC,KAAK,QACLD,QAASA,EAAQmE,gBACjBjE,IAAKA,GAHAgE,eAMRlE,GACC,cAAC,EAAD,CAEEC,KAAK,SACLD,QAASA,EAAQoE,aACjBlE,IAAKA,GAHAgE,eAMRlE,GACC,cAAC,EAAD,CAEEA,QAASA,EAAQqE,mBACjBpE,KAAK,WACLC,IAAKA,GAHAgE,mB,gBC9DAI,EAjBW,SAACC,GACzB,MAAoCP,mBAAS,MAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KAaA,OAZAd,qBAAU,WACR,IAAMe,EAAgBH,EAAII,QACpBC,EAAiB,IAAIC,KAAe,SAACjE,GACzCA,EAAQkE,SAAQ,SAACC,GACfN,EAAcM,EAAMC,mBAIxB,OADAJ,EAAeK,QAAQP,GAChB,WACLE,EAAeM,UAAUR,MAE1B,CAACH,IACGC,G,mCC6UMW,MAvVf,YAA+C,IAA7BC,EAA4B,EAA5BA,UAAWlF,EAAiB,EAAjBA,IAC3B,GAD4C,EAAZmF,SACcrB,mBAAS,OAAvD,mBAAOsB,EAAP,KACA,GADA,KAC0BtB,mBAAS,OAAnC,mBAAOtC,EAAP,KAAc6D,EAAd,KACA,EAA4BvB,mBAAS,MAArC,mBAAOvC,EAAP,KAAe+D,EAAf,KACA,EAA0BC,IAAMzB,SAAS,GAAzC,mBAAO0B,EAAP,KAAcC,EAAd,KACMC,EAASC,mBACTC,EAAaD,mBACbrB,EAAaK,EAAeiB,GAgSlC,SAASC,EAAUC,GACjB,MAAO,CACLhH,GAAG,cAAD,OAAgBgH,GAClB,gBAAgB,mBAAhB,OAAoCA,IASxC,OApSArC,qBAAU,WACGnC,IAAayE,UAAUC,KAAO,WAAe,OAAO1E,IAAU2E,KAAKC,QAAQD,KAAKE,OAAS,KAApG,IACM9D,EAAMf,IAAUoE,EAAOjB,SAE7B,EACEH,GAAcsB,EAAWnB,QAAQ2B,wBAD7B5E,EAAN,EAAMA,MAAOD,EAAb,EAAaA,OAIbA,GAAU,IAEV8D,EAHA7D,GAAS,KAIT8D,EAAU/D,GAEV,IAUI8E,EAVEC,EAAahF,MAGhBiF,QAAQ,CAAC/E,EAAOD,GAAS6D,GAAmBoB,GAC5CC,UAAU,KAEPC,EAAgBpF,MAAagF,WAAWA,GAG1CK,EAAY,GAGZC,EAAa,CACf,CAAC,mBAAoB,oBACrB,CAAC,qBAAsB,mBACvB,CAAC,mBAAoB,oBACrB,CAAC,qBAAsB,oBACvB,CAAC,qBAAsB,oBAGZ,GAATpB,IACK,QAEPmB,EAAYC,EAAW,GACvBP,EAAI/E,IAAU,QAEH,GAATkE,IACK,SAEPmB,EAAYC,EAAW,GACvBP,EAAI/E,IAAU,QAEH,GAATkE,IACK,aAEPmB,EAAYC,EAAW,GACvBP,EAAI/E,IAAU,QAEH,GAATkE,IACK,eAEPmB,EAAYC,EAAW,GACvBP,EAAI/E,IAAU,QAEH,GAATkE,IACK,oBAEPmB,EAAYC,EAAW,GACvBP,EAAI/E,IAAU,SAGhB,IAAMuF,EAAUvF,IAAO4D,GAAW,SAAC3E,GACjC,OAAa,GAATiF,EACKjF,EAAEhB,MAEE,GAATiG,EACKjF,EAAEd,OAGE,GAAT+F,EACKjF,EAAEuG,WAEE,GAATtB,EACMjF,EAAEhB,MAAQgB,EAAEwG,WAAc,IAGvB,GAATvB,EACMjF,EAAEd,OAAOc,EAAEhB,MAAS,SAD9B,KAKIyH,EAAU1F,IAAO4D,GAAW,SAAC3E,GACjC,OAAa,GAATiF,EACKjF,EAAEhB,MAEE,GAATiG,EACKjF,EAAEd,OAEE,GAAT+F,EACKjF,EAAEuG,WAEE,GAATtB,EACMjF,EAAEhB,MAAQgB,EAAEwG,WAAc,IAEvB,GAATvB,EACMjF,EAAEd,OAAOc,EAAEhB,MAAS,SAD9B,KAKI0H,EAAa3F,MAEhBmB,OAAO,CAACoE,EAASG,IACjBtE,MAAMiE,GAyCT,IAQIO,EAAU5F,IAAU,QAAQgB,OAAO,OAAOC,KAAK,QAAS,WAE5DF,EACGc,UAAU,YACVxD,KAAK6G,EAAUW,UACfC,KAAK,QACLC,GAAG,aAAa,SAAC9G,GAChB,OAAO2G,EAAQxD,MAAM,aAAc,WAAWR,KAAK,YAAc3C,MAMlE8G,GAAG,aAAa,SAAC9G,GAChB,OAAO2G,EACJxD,MAAM,MAAO4D,OAAOC,MAAMhE,EAAI,GAAK,MACnCG,MAAM,OAAQ4D,OAAOC,MAAMjE,EAAI,GAAK,MACpCJ,MAAK,WAEJ,OADa3C,EAAEiH,KAAK,GAAGC,SACRC,WAAWC,WAI/BN,GAAG,YAAY,WACd,OAAOH,EAAQxD,MAAM,aAAc,aAEpCnB,KAAK,QAAS,WACdqF,aACAC,SAAS,KACTtF,KAAK,QAAQ,SAAChC,GAAD,OAAO0G,EA5EvB,SAAyBa,GACvB,IAAM3I,EAAU+F,EAAU6C,MAAK,SAACC,GAAD,OAAOA,EAAEF,MAAQA,KAEhD,QAAeG,GAAX9I,EAAsB,CAExB,GAAa,GAATqG,GACErG,EAAS,OAAOA,EAAQI,MAE9B,GAAa,GAATiG,GACErG,EAAS,OAAOA,EAAQM,OAG9B,GAAa,GAAT+F,GACErG,EAAS,OAAOA,EAAQ2H,WAG9B,GAAa,GAATtB,GACErG,EAAS,OAAQA,EAAQI,MAAQJ,EAAQ4H,WAAc,IAG7D,GAAa,GAATvB,GACErG,EAAU,OAAQA,EAAQM,OAAON,EAAQI,MAAS,KAuD1B2I,CAAgB3H,EAAEmH,WAAWS,YAE5D5F,KAAK,SAAU,SACfA,KAAK,KAAK,SAAChC,GAAD,OAAOmG,EAAcnG,MAclC8B,EACGc,UAAU,UACVxD,KAAK,CAACyF,IACNgC,KAAK,QACL7E,KAAK,QAAS,SACdW,MAAK,SAAC3C,GAGL,GAAU,OAANA,EAAY,CACd,IAAMpB,EAAU+F,EAAU6C,MAAK,SAACC,GAAD,OAAOA,EAAEF,MAAQvH,EAAEmH,WAAWS,UAE7D,OAAOhJ,EAAQM,OAAS,IAAMN,EAAQI,UAGzCgD,KAAK,OAAQ,SACbA,KAAK,IAAK,IACVA,KAAK,IAAK,IAEEjB,MAAiBmB,OAAO,CAAC,EAAG,KAAKC,MAAMiE,GAAtD,IAEQyB,EAAeC,IACpBC,cACAC,WAAW,IACXC,MAAM,IACNC,OAAO,YACPC,MAAMzB,GAEP5E,EACCC,OAAO,KACPC,KAAK,QAAS,gBACdA,KAAK,YAHN,oBAICS,KAAKoF,GAGY/F,EAAIc,UAAU,iBAAiB6C,OAGxB7C,UAAU,cAG9BwF,MAAK,SAASpI,EAAEwB,GACrB,IAAI6G,EAAQtH,IAAU2E,MAClB4C,EAAID,EAAM1F,OAEX4F,WAAWD,IAAM,EAClBD,EAAM1F,KAAK,QAEb0F,EAAM1F,KAAKmD,EAAEwC,GAAGE,QAAQ,IAAK,WAK9B,CAACzE,EAAYY,EAAWE,EAAiBpF,EAAKwF,IAyC7C,sBACE1G,GAAG,QACH4E,MAAO,CACLC,aAAc,OACdpC,OAAQ,QAEV8C,IAAKuB,EANP,UAQE,cAACoD,EAAA,EAAD,CAAKC,GAAI,CAAEzH,MAAO,OAAQC,OAAQ,OAAQyH,QAAS,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,UAAW,UAAtH,SACE,cAACL,EAAA,EAAD,CAAKC,GAAI,CAAExH,OAAQ,qBAAqB6H,QAAS,oBAAqBC,gBAAiB,iBAAvF,SACE,eAACC,EAAA,EAAD,CACEC,UAAU,QACVjE,MAAOA,EACPkE,SAnBS,SAACnC,EAAOoC,GAC3BlE,EAASkE,IAmBC,aAAW,qBAJb,UAME,cAACC,EAAA,EAAD,aAAKhB,MAAM,SAAY/C,EAAU,KACjC,cAAC+D,EAAA,EAAD,aAAKhB,MAAM,UAAa/C,EAAU,KAClC,cAAC+D,EAAA,EAAD,aAAKhB,MAAM,YAAe/C,EAAU,KACpC,cAAC+D,EAAA,EAAD,aAAKhB,MAAM,iBAAoB/C,EAAU,KACzC,cAAC+D,EAAA,EAAD,aAAKhB,MAAM,uBAA0B/C,EAAU,YAIrD,qBACEnC,MAAO,CACLlC,MAAOA,EACPD,OAAQA,GAEV8C,IAAKqB,QC7VA,G,OAAA,IAA0B,iCCA1B,MAA0B,+CCwM1BmE,MA9Lf,WACE,MAA8B/F,mBAAS,CACrCgG,YAAa,GACb7F,gBAAiB,GACjBC,aAAc,GACd6F,YAAa,GACbC,eAAgB,GAChBC,gBAAiB,GACjB9F,mBAAoB,GACpBe,UAAW,GACXgF,0BAA2B,GAC3B/E,SAAU,KAVZ,mBAAOrF,EAAP,KAAgBqK,EAAhB,KAaA,EAAgCrG,mBAAS,eAAzC,mBAAOzE,EAAP,KAAiB+K,EAAjB,KAkJA,OA7GA3G,qBAAU,WACR4G,QAAQ7J,IAAI,CACVc,IApCF,+FAqCEA,IAAOgJ,GACPhJ,IAnCF,0JAoCEA,IAjCF,uJAkCEA,IA/BF,0JAgCEA,IA7BF,qHA8BEA,IAAOiJ,GACPjJ,IA5BF,uIA6BEA,IA1BF,qJA2BGkJ,MAAK,SAACC,GACP,IADoB,EACdC,EAAWpJ,IACfmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAEqK,gBAC1B,SAACrK,GAAD,OAAOA,EAAEsK,kBAGLC,EAAYxJ,IAChBmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAEwK,aAC1B,SAACxK,GAAD,OAAOA,EAAEsK,kBAGLG,EAAe1J,IACnBmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAE0K,gBAC1B,SAAC1K,GAAD,OAAOA,EAAEsK,kBAGLK,EAAkB5J,IACtBmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAE4K,oBAC1B,SAAC5K,GAAD,OAAOA,EAAEsK,kBAGLO,EAAuB9J,IAC3BmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAE8K,0BAC1B,SAAC9K,GAAD,OAAOA,EAAEsK,kBAGLS,EAAuBhK,IAC3BmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAEgL,kBAC1B,SAAChL,GAAD,OAAOA,EAAEsK,kBAGLW,EAAyBlK,IAC7BmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAEkL,kCAC1B,SAAClL,GAAD,OAAOA,EAAEsK,kBAGLa,EAAqBpK,IACzBmJ,EAAS,IACT,SAACE,GAAD,OAAOrJ,IAAOqJ,GAAG,SAACpK,GAAD,OAAOA,EAAEoL,8BAC1B,SAACpL,GAAD,OAAOA,EAAEsK,kBAGPe,EAAU,GAjDM,cAmDClB,EAAShK,WAnDV,kDAmDRmL,EAnDQ,KAmDLlB,EAnDK,KAoDlBiB,EAAQE,KAAK,CACX3M,QAAS0M,EACTtM,MAAOoL,EACPlL,OAAQqL,EAAUiB,IAAIF,GACtBG,UAAWhB,EAAae,IAAIF,GAE5BI,aAAcf,EAAgBa,IAAIF,GAElCK,kBAAmBd,EAAqBW,IAAIF,GAC5C/E,WAAYwE,EAAqBS,IAAIF,GACrCM,cAAeX,EAAuBO,IAAIF,GAC1CO,UAAWV,EAAmBK,IAAIF,GAClC9E,WAAY7E,SACVuI,EAAS,GAAG1C,MAAK,SAACxH,GAAD,OAAOA,EAAEsK,iBAAmBgB,KAAGQ,YAElDvE,KAAM2C,EAAS,GAAG1C,MAAK,SAACxH,GAAD,OAAOA,EAAEsK,iBAAmBgB,KAAG/D,KACtDwE,KAAM7B,EAAS,GAAG1C,MAAK,SAACxH,GAAD,OAAOA,EAAEsK,iBAAmBgB,KAAGU,MACtDC,IAAK/B,EAAS,GAAG1C,MAAK,SAACxH,GAAD,OAAOA,EAAEsK,iBAAmBgB,KAAGY,OAlBzD,2BAA0C,IAnDtB,8BA0EpBb,EAAUA,EAAQtL,QAAO,SAACC,GACxB,MAAiB,IAAVA,EAAEuH,QAKXqC,EAAW,CACTL,YAAaW,EAAS,GACtBxG,gBAAiBwG,EAAS,GAC1BvG,aAAcuG,EAAS,GACvBR,gBAAiBQ,EAAS,GAC1BvF,UAAW0G,EACX5B,eAAgBS,EAAS,GACzBtG,mBAAoBsG,EAAS,GAC7BP,0BAA2BO,EAAS,GACpCtF,SAAUsF,EAAS,UAGtB,IAOD,sBAAK3L,GAAG,YAAR,UAIE,sBAAKA,GAAG,OAAR,UACE,qBAAKA,GAAG,eAER,cAAC,EAAD,CACEO,SAAUA,EACVD,YAdR,SAAqBD,GACnBiL,EAAYjL,IAcNQ,KAAMG,EAAQoF,eAGlB,qBAAKpG,GAAG,SAAR,SACE,cAAC,EAAD,CACEkB,IAAKX,EACL6F,UAAWpF,EAAQoF,UACnBC,SAAUrF,EAAQqF,aAItB,sBAAKrG,GAAG,QAAR,UACE,+BAAKO,EAAL,uCACA,cAAC,EAAD,CAAQS,QAASA,EAASE,IAAKX,WCrLxBqN,MATf,WACE,OACE,sBAAK5N,GAAG,MAAR,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIS6N,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCARO,EAAQC,YAAY,CACxBC,QAAS,CACPC,QAAS,CACPC,KAAM,cAKZC,IAASC,OACP,cAACC,EAAA,EAAD,CAAeP,MAAOA,EAAtB,SACA,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,QAGFC,SAASC,eAAe,SAM1BlB,K","file":"static/js/main.4c2aee6c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/virus.b900566a.png\";","import React from \"react\";\nimport \"./Header.css\";\nimport virusIcon from \"../../assets/virus.png\";\n\nfunction Header() {\n  return (\n    <div id=\"header\">\n      <div id=\"header__title\">\n        <img src={virusIcon} />\n        <h1 className=\"text-shadow\">COVID-19 Portal</h1>\n      </div>\n      {/* <nav id=\"nav\">\n        <ul id=\"header__items\">\n          <li className=\"header__item\">\n            <a className=\"text-shadow\" href=\"#\">\n              Visualizations\n            </a>\n          </li>\n          <li className=\"header__item\">\n            <a className=\"text-shadow\" href=\"#\">\n              About\n            </a>\n          </li>\n        </ul>\n      </nav> */}\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Country.css\";\n\nfunction Country({ country, handleClick, selected }) {\n  // const [selected, setSelected] = useState(false);\n\n  function handleClickCountry() {\n    // setSelected(selected === false ? true : false);\n    handleClick(country.country);\n  }\n\n  return (\n    <div\n      className={`country ${selected === country.country ? \"cSelected\" : \"\"}`}\n      onClick={handleClickCountry}\n    >\n      <div className=\"country__content\">\n        <h1>{country.country}</h1>\n        <div className=\"country__statistics\">\n          <p className=\"country__statistics-cases\">\n            Cases: {country.cases.toLocaleString(\"en-US\")}\n          </p>\n          <p>|</p>\n          <p className=\"country__statistics-deaths\">\n          Deaths: {country.deaths.toLocaleString(\"en-US\")}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Country;\n","import React, { useState, useEffect } from \"react\";\nimport Country from \"./Country\";\nimport * as d3 from \"d3\";\n\nfunction Countries({ data, handleClick, selected }) {\n  return data.map((country) => {\n    return (\n      <Country\n        selected={selected}\n        handleClick={handleClick}\n        key={country.country}\n        country={country}\n      />\n    );\n  });\n}\n\nexport default Countries;\n","import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\n\nfunction LineGraph({ jhuData, type, owi, loc }) {\n  useEffect(() => {\n    if (type == \"cases\" && jhuData.length > 0) {\n      rollUpOwidLineGraph(jhuData, loc, type);\n    }\n\n    if (type == \"deaths\" && jhuData.length > 0) {\n      rollUpOwidLineGraph(jhuData, loc, type);\n    }\n\n    if (type == \"vaccines\" && jhuData.length > 0) {\n      rollUpOwidLineGraph(jhuData, loc, type);\n    }\n  }, []);\n\n  //Uses OWID Data to form a region line graph for cases, deaths, and vaccinations\n  function rollUpOwidLineGraph(dataType, location, type) {\n    let format;\n\n    if (type === \"vaccines\") {\n      format = \"Country_Region\";\n    } else {\n      format = \"Country/Region\";\n    }\n\n    const data = dataType.filter((d) => d[format] === location);\n    let all = null;\n    try {\n      all = Object.entries(data[0]);\n    } catch (err) {\n      return err;\n    }\n    let color =\n      type === \"cases\"\n        ? \"#d73f47\"\n        : type === \"deaths\"\n        ? \"#aba09c\"\n        : \"#4a933e\"\n    // data = unroll(data, [\"date\"], \"value\");\n    if (all) {\n      linegraph(all, location, \"%Y-%m-%d\", color, type);\n    }\n    // });\n  }\n\n  //Line Graph (Line can represent cases, deaths, vaccinations in a region over a specific period of time)\n  //Modify this to change visualization of line graph\n  function linegraph(data, location, dateformat, color, type) {\n    // if (type === \"cases\" || type === \"deaths\") {\n    for (const prop of data) {\n      prop.date = new Date(prop.date);\n    }\n    // }\n\n    let graphType;\n    let titleText;\n\n    if (type == \"cases\") {\n      graphType = \"#linegraph__\" + type;\n      titleText = \"Infections\";\n    } else if (type == \"deaths\") {\n      graphType = \"#linegraph__\" + type;\n      titleText = \"Deaths\";\n    } else if (type == \"vaccines\") {\n      graphType = \"#linegraph__\" + type;\n      titleText = \"Vaccinations\";\n    } else {\n      console.log(\"no type available)\");\n    }\n\n    var div = d3.select(graphType);\n\n    // let title = div\n    //   .append(\"h2\")\n    //   .attr(\"width\", \"100px\")\n    //   .attr(\"display\", \"block\")\n    //   .attr(\"margin\", \"auto\")\n    //   .attr(\"stroke\", \"black\")\n    //   .text(titleText);\n\n    const height = 440;\n    const width = 400;\n    const margin = {\n      top: 20,\n      right: 30,\n      bottom: 30,\n      left: 70,\n    };\n\n    if (type == \"cases\" || type == \"deaths\") {\n      data.shift();\n      data.shift();\n      data.shift();\n      data.shift();\n    } else {\n      for (let i = 0; i < 12; i++) {\n        data.shift();\n      }\n    }\n\n    const X = d3.map(data, (d) => {\n      return new Date(d[0]);\n    });\n\n    const Y = d3.map(data, (d) => {\n      if (d[1] === \"\") {\n        return 0;\n      } else {\n        return parseInt(d[1]);\n      }\n    });\n\n    const I = d3.range(X.length);\n\n    var svg = div\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .attr(\"viewBox\", [0, 0, width, height])\n      .attr(\"style\", \"max-width: 100%; height: auto; height: intrinsic;\");\n\n    const xScale = d3\n      .scaleUtc()\n      .domain(d3.extent(X))\n      .range([margin.left, width - margin.right]);\n    const xAxis = d3.axisBottom(xScale).ticks(5).tickSizeOuter(0);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([0, d3.max(Y)])\n      .range([height - margin.bottom, margin.top]);\n\n    const yAxis = d3.axisLeft(yScale).ticks(10).tickSizeOuter(0);\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n      .call(xAxis)\n      .call((g) =>\n        g\n          .append(\"text\")\n          .attr(\"x\", width - margin.right)\n          .attr(\"y\", margin.bottom)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"start\")\n          .text(\"Date\")\n      );\n\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},0)`)\n      .call(yAxis)\n      // .call((g) => g.select(\".domain\").remove())\n      .call((g) =>\n        g\n          .selectAll(\".tick line\")\n          .clone()\n          .attr(\"x2\", width - margin.left - margin.right)\n          .attr(\"stroke-opacity\", 0.1)\n      )\n      .call((g) =>\n        g\n          .append(\"text\")\n          .attr(\"x\", -margin.left)\n          .attr(\"y\", 10)\n          .attr(\"fill\", \"currentColor\")\n          .attr(\"text-anchor\", \"start\")\n          .text(titleText)\n      );\n\n    const line = d3\n      .line()\n      .x((i) => xScale(X[i]))\n      .y((i) => yScale(Y[i]));\n\n    svg\n      .append(\"path\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", color)\n      .attr(\"stroke-width\", 1.5)\n      .attr(\"stroke-linecap\", \"round\")\n      .attr(\"stroke-linejoin\", \"round\")\n      .attr(\"stroke-opacity\", 1)\n      .attr(\"d\", line(I));\n  }\n\n  return <div style={{ marginBottom: \"20px\" }} id={`linegraph__${type}`}></div>;\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport LineGraph from \"./LineGraph\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./Graphs.css\";\nimport { Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\n\nfunction Graphs({ jhuData, owi, jhu, loc }) {\n  const [value, setValue] = useState(0);\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n\n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  }\n\n  const handleChange = (event, newValue) => {\n    console.log(newValue);\n    setValue(newValue);\n  };\n\n  const lineGraphs = (\n    <Grid container spacing={2}>\n      <Grid item xs={6}>\n        <LineGraph key={uuidv4()} type=\"cases\" owi={owi} loc={loc} />\n      </Grid>\n      <Grid item xs={6}>\n        <LineGraph key={uuidv4()} type=\"deaths\" owi={owi} loc={loc} />\n      </Grid>\n\n      <Grid item xs={6}>\n        <LineGraph key={uuidv4()} type=\"vaccines\" owi={owi} loc={loc} />\n      </Grid>\n    </Grid>\n  );\n\n  return (\n    <div id=\"country__graphs\">\n      {jhuData && (\n        <LineGraph\n          key={uuidv4()}\n          type=\"cases\"\n          jhuData={jhuData.seriesConfirmed}\n          loc={loc}\n        />\n      )}\n      {jhuData && (\n        <LineGraph\n          key={uuidv4()}\n          type=\"deaths\"\n          jhuData={jhuData.seriesDeaths}\n          loc={loc}\n        />\n      )}\n      {jhuData && (\n        <LineGraph\n          key={uuidv4()}\n          jhuData={jhuData.seriesVaccineDoses}\n          type=\"vaccines\"\n          loc={loc}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Graphs;\n","import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst UseResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default UseResizeObserver;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport worldData from \"../../util/custom.json\";\nimport * as d3 from \"d3\";\nimport ResizeObserver from \"./UseResizeObserver\";\nimport PropTypes from \"prop-types\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport Box from \"@mui/material/Box\";\nimport \"./Center.css\";\nimport legend from \"d3-svg-legend\";\n\nfunction Center({ countries, loc, worldMap }) {\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [width, setWidth] = useState(null);\n  const [height, setHeight] = useState(null);\n  const [value, setValue] = React.useState(0);\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = ResizeObserver(wrapperRef);\n\n  const rotConfig = {\n    speed: 0.01,\n    verticalTilted: -10,\n    horizontalTilted: 0,\n  };\n\n  useEffect(() => {\n    let last = d3.selection.prototype.last = function() {   return d3.select(this.nodes()[this.size() - 1]); };\n    const svg = d3.select(svgRef.current);\n\n    let { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    width -= 100;\n    height -= 100;\n\n    setWidth(width);\n    setHeight(height);\n\n    const projection = d3\n      // .geoOrthographic()\n      .geoMercator()\n      .fitSize([width, height], selectedCountry || worldData)\n      .precision(150);\n\n    const pathGenerator = d3.geoPath().projection(projection);\n\n    let type;\n    let colorType = [];\n    let f;\n\n    let colorRange = [\n      [\"rgb(107, 75, 45)\", \"rgb(255, 74, 74)\"],\n      [\"rgb(255, 244, 232)\", \"rgb(68, 64, 62)\"],\n      [\"rgb(46, 73, 123)\", \"rgb(71, 187, 94)\"],\n      [\"rgb(242, 255, 178)\", \"rgb(107, 75, 45)\"],\n      [\"rgb(209, 230, 255)\", \"rgb(72, 55, 68)\"],\n    ];\n\n    if (value == 0) {\n      type = \"cases\";\n      // setColorType(colorRange[0]);\n      colorType = colorRange[0];\n      f = d3.format(\".2s\");\n    }\n    if (value == 1) {\n      type = \"deaths\";\n      // setColorType(colorRange[1]);\n      colorType = colorRange[1];\n      f = d3.format(\".2s\");\n    }\n    if (value == 2) {\n      type = \"dosesAdmin\";\n      // setColorType(colorRange[2]);\n      colorType = colorRange[2];\n      f = d3.format(\".2s\");\n    }\n    if (value == 3) {\n      type = \"incidentRate\";\n      // setColorType(colorRange[3]);\n      colorType = colorRange[3];\n      f = d3.format(\".2s\");\n    }\n    if (value == 4) {\n      type = \"caseFatalityRatio\";\n      // setColorType(colorRange[4]);\n      colorType = colorRange[4];\n      f = d3.format(\"0.1f\");\n    }\n\n    const minType = d3.min(countries, (d) => {\n      if (value == 0) {\n        return d.cases;\n      }\n      if (value == 1) {\n        return d.deaths;\n      }\n\n      if (value == 2) {\n        return d.dosesAdmin;\n      }\n      if (value == 3) {\n        return (d.cases / d.population) * 100000;  \n      }\n\n      if (value == 4) {\n        return (d.deaths/d.cases) * 100;;\n      }\n    });\n\n    const maxType = d3.max(countries, (d) => {\n      if (value == 0) {\n        return d.cases;\n      }\n      if (value == 1) {\n        return d.deaths;\n      }\n      if (value == 2) {\n        return d.dosesAdmin;\n      }\n      if (value == 3) {\n        return (d.cases / d.population) * 100000;\n      }\n      if (value == 4) {\n        return (d.deaths/d.cases) * 100;\n      }\n    });\n\n    const colorScale = d3\n      .scaleLinear()\n      .domain([minType, maxType])\n      .range(colorType);\n\n    function getCountryValue(iso3) {\n      const country = countries.find((c) => c.iso3 == iso3);\n\n      if (country != undefined) {\n        // const another = countries.find((c) => c.country == country.location);\n        if (value == 0) {\n          if (country) return country.cases;\n        }\n        if (value == 1) {\n          if (country) return country.deaths;\n        }\n\n        if (value == 2) {\n          if (country) return country.dosesAdmin;\n        }\n\n        if (value == 3) {\n          if (country) return (country.cases / country.population) * 100000;\n        }\n\n        if (value == 4) {\n          if (country)  return (country.deaths/country.cases) * 100;\n        }\n      }\n    }\n\n    // rotateMap();\n\n    function rotateMap() {\n      d3.timer((elapsed) => {\n        projection.rotate([\n          rotConfig.speed * elapsed - 120,\n          rotConfig.verticalTilted,\n          rotConfig.horizontalTilted,\n        ]);\n        svg.selectAll(\"path\").attr(\"d\", pathGenerator);\n      });\n    }\n\n    const di = (\n      <div className=\"info\">\n        <h1>US</h1>\n        <p>cases</p>\n        <p>deaths</p>\n      </div>\n    );\n\n    var tooltip = d3.select(\"body\").append(\"div\").attr(\"class\", \"tooltip\");\n\n    svg\n      .selectAll(\".country\")\n      .data(worldData.features)\n      .join(\"path\")\n      .on(\"mouseover\", (d) => {\n        return tooltip.style(\"visibility\", \"visible\").text(\"radius = \" + d);\n      })\n      // .on(\"click\", (feature, d) => {\n      //   setSelectedCountry(selectedCountry === d ? null : d);\n      // })\n\n      .on(\"mousemove\", (d) => {\n        return tooltip\n          .style(\"top\", window.event.y - 50 + \"px\")\n          .style(\"left\", window.event.x + 30 + \"px\")\n          .text(() => {\n           let country = d.path[0].__data__;\n            return country.properties.name;\n          });\n      })\n\n      .on(\"mouseout\", function () {\n        return tooltip.style(\"visibility\", \"hidden\");\n      })\n      .attr(\"class\", \"country\")\n      .transition()\n      .duration(1000)\n      .attr(\"fill\", (d) => colorScale(getCountryValue(d.properties.iso_a3)))\n\n      .attr(\"stroke\", \"black\")\n      .attr(\"d\", (d) => pathGenerator(d));\n\n    // svg\n    //   .selectAll(\"myCircles\")\n    //   .data(countries)\n    //   .enter()\n    //   .append(\"circle\")\n    //   .attr(\"transform\", (d) => `translate(${projection([d.long, d.lat])})`)\n    //   .attr(\"r\", 1)\n    //   .style(\"fill\", \"69b3a2\")\n    //   .attr(\"stroke\", \"#69b3a2\")\n    //   .attr(\"stroke-width\", 3)\n    //   .attr(\"fill-opacity\", 0.4);\n\n    svg\n      .selectAll(\".label\")\n      .data([selectedCountry])\n      .join(\"text\")\n      .attr(\"class\", \"label\")\n      .text((d) => {\n        // console.log(d && d.properties.iso_a3);\n\n        if (d !== null) {\n          const country = countries.find((c) => c.iso3 == d.properties.iso_a3);\n          // console.log(country);\n          return country.deaths + \" \" + country.cases;\n        }\n      })\n      .attr(\"fill\", \"green\")\n      .attr(\"x\", 20)\n      .attr(\"y\", 25);\n\n    const linear = d3.scaleLinear().domain([0, 10]).range(colorType);\n\n      const legendLinear = legend\n      .legendColor()\n      .shapeWidth(20)\n      .cells(10)\n      .orient(\"vertical\")\n      .scale(colorScale);\n\n      svg\n      .append(\"g\")\n      .attr(\"class\", \"legendLinear\")\n      .attr(\"transform\", `translate(10,20)`)\n      .call(legendLinear);\n\n    //get legendCells\n    const legendCells = svg.selectAll(\"g.legendCells\").last();\n\n    //get labels of legendCells\n    const labels = legendCells.selectAll(\"text.label\");\n\n    //Iterate through each value and adjust formatting\n    labels.each(function(d,i) {\n      let label = d3.select(this);\n      let t = label.text();\n\n      if(parseFloat(t) <= 1){\n        label.text(\"<= 1\");\n      }else{\n      label.text(f(t).replace(\"G\", \"B\"));\n      }\n\n    });\n\n  }, [dimensions, countries, selectedCountry, loc, value]);\n\n  function TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box sx={{ p: 3 }}>\n            <Typography>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n\n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.number.isRequired,\n    value: PropTypes.number.isRequired,\n  };\n\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n\n  return (\n      <div\n        id=\"world\"\n        style={{\n          marginBottom: \"1rem\",\n          height: \"100%\",\n        }}\n        ref={wrapperRef}\n      >\n        <Box sx={{ width: \"100%\" ,margin: \"auto\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\", textAlign: \"center\"}}>\n          <Box sx={{ margin: \"15px 15px 5px 15px\",padding: \"0px 15px 0px 15px\", backgroundColor: \"rgb(32,32,32)\"}}>\n            <Tabs\n              textColor=\"white\"\n              value={value}\n              onChange={handleChange}\n              aria-label=\"basic tabs example\"\n            >\n              <Tab label=\"Cases\" {...a11yProps(0)} />\n              <Tab label=\"Deaths\" {...a11yProps(1)} />\n              <Tab label=\"Vaccines\" {...a11yProps(2)} />\n              <Tab label=\"Incident Rate\" {...a11yProps(3)} />\n              <Tab label=\"Fatality/Case Ratio\" {...a11yProps(4)} />\n            </Tabs>\n          </Box>\n        </Box>\n        <svg\n          style={{\n            width: width,\n            height: height,\n          }}\n          ref={svgRef}\n        ></svg>\n      </div>\n  );\n}\n\nexport default Center;\n","export default __webpack_public_path__ + \"static/media/jhu.0eb7c668.csv\";","export default __webpack_public_path__ + \"static/media/vaccineDailyReport.9b8786eb.csv\";","import React, { useEffect, useState } from \"react\";\nimport Header from \"../header/Header\";\nimport Countries from \"../leftSidebar/Countries\";\nimport Graphs from \"../rightSidebar/Graphs\";\nimport Center from \"../center/Center\";\nimport \"./Dashboard.css\";\nimport * as d3 from \"d3\";\nimport jhuDailyReports from \"../../data/jhu.csv\";\nimport vaccineDailyReport from \"../../data/vaccineDailyReport.csv\";\n\nfunction Dashboard() {\n  const [jhuData, setjhuData] = useState({\n    dailyReport: [],\n    seriesConfirmed: [],\n    seriesDeaths: [],\n    seriesCases: [],\n    seriesVaccines: [],\n    seriesRecovered: [],\n    seriesVaccineDoses: [],\n    countries: [],\n    UID_ISO_FIPS_LookUp_Table: [],\n    worldMap: [],\n  });\n\n  const [selected, setSelected] = useState(\"Afghanistan\");\n\n  const owi =\n    \"https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv\";\n\n  const jhuTSeriesConfirmed =\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\n\n  const jhuTSeriesDeaths =\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\";\n\n  const jhuTSeriesRecovered =\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\";\n\n  const uID_ISO_FIPS_LookUp_Table =\n    \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv\";\n\n  const vaccineTSeries =\n    \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/time_series_covid19_vaccine_global.csv\";\n\n  const vaccineDosesTSeries =\n    \"https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/time_series_covid19_vaccine_doses_admin_global.csv\";\n\n  function generateDate(daysPast) {\n    const todayDate = new Date();\n\n    const yesterdayDate = new Date(todayDate);\n\n    yesterdayDate.setDate(todayDate.getDate() - daysPast);\n\n    const dd = String(yesterdayDate.getDate()).padStart(2, \"0\");\n    const mm = String(yesterdayDate.getMonth() + 1).padStart(2, \"0\");\n    const yyyy = yesterdayDate.getFullYear();\n\n    return mm + \"-\" + dd + \"-\" + yyyy;\n  }\n\n  useEffect(() => {\n    Promise.all([\n      d3.csv(owi),\n      d3.csv(jhuDailyReports),\n      d3.csv(jhuTSeriesConfirmed),\n      d3.csv(jhuTSeriesDeaths),\n      d3.csv(jhuTSeriesRecovered),\n      d3.csv(uID_ISO_FIPS_LookUp_Table),\n      d3.csv(vaccineDailyReport),\n      d3.csv(vaccineTSeries),\n      d3.csv(vaccineDosesTSeries),\n    ]).then((loadData) => {\n      const jhuCases = d3.rollup(\n        loadData[1],\n        (v) => d3.sum(v, (d) => d.Confirmed),\n        (d) => d.Country_Region\n      );\n\n      const jhuDeaths = d3.rollup(\n        loadData[1],\n        (v) => d3.sum(v, (d) => d.Deaths),\n        (d) => d.Country_Region\n      );\n\n      const jhuRecovered = d3.rollup(\n        loadData[1],\n        (v) => d3.sum(v, (d) => d.Recovered), //changed this from recoved to recovered\n        (d) => d.Country_Region\n      );\n\n      const jhuIncidentRate = d3.rollup(\n        loadData[1],\n        (v) => d3.sum(v, (d) => d.Incident_Rate),\n        (d) => d.Country_Region\n      );\n\n      const jhuCaseFatalityRatio = d3.rollup(\n        loadData[1],\n        (v) => d3.sum(v, (d) => d.Case_Fatality_Ratio),\n        (d) => d.Country_Region\n      );\n\n      const jhuDosesAdministered = d3.rollup(\n        loadData[6],\n        (v) => d3.sum(v, (d) => d.Doses_admin),\n        (d) => d.Country_Region\n      );\n\n      const jhuPartiallyVaccinated = d3.rollup(\n        loadData[6],\n        (v) => d3.sum(v, (d) => d.People_partially_vaccinated),\n        (d) => d.Country_Region\n      );\n\n      const jhuFullyVaccinated = d3.rollup(\n        loadData[6],\n        (v) => d3.sum(v, (d) => d.People_fully_vaccinated),\n        (d) => d.Country_Region\n      );\n\n      let tempArr = [];\n\n      for (const [k, v] of jhuCases.entries()) {\n        tempArr.push({\n          country: k,\n          cases: v,\n          deaths: jhuDeaths.get(k),\n          recovered: jhuRecovered.get(k),\n          // Incident_Rate: Incidence Rate = cases per 100,000 persons.\n          incidentRate: jhuIncidentRate.get(k),\n          // Case_Fatality_Ratio (%): Case-Fatality Ratio (%) = Number recorded deaths / Number cases.\n          caseFatalityRatio: jhuCaseFatalityRatio.get(k),\n          dosesAdmin: jhuDosesAdministered.get(k),\n          partiallyVacc: jhuPartiallyVaccinated.get(k),\n          fullyVacc: jhuFullyVaccinated.get(k),\n          population: parseInt(\n            loadData[5].find((d) => d.Country_Region === k).Population\n          ),\n          iso3: loadData[5].find((d) => d.Country_Region === k).iso3,\n          long: loadData[5].find((d) => d.Country_Region === k).Long_,\n          lat: loadData[5].find((d) => d.Country_Region === k).Lat,\n        });\n      }\n\n      //Filters out any \"non-countries\"\n      tempArr = tempArr.filter((d) => {\n        return d.iso3 != \"\";\n      });\n\n      // setMapData(filteredData);\n\n      setjhuData({\n        dailyReport: loadData[1],\n        seriesConfirmed: loadData[2],\n        seriesDeaths: loadData[3],\n        seriesRecovered: loadData[4],\n        countries: tempArr,\n        seriesVaccines: loadData[7],\n        seriesVaccineDoses: loadData[8],\n        UID_ISO_FIPS_LookUp_Table: loadData[5],\n        worldMap: loadData[9],\n      });\n    });\n  }, []);\n\n  function handleClick(country) {\n    setSelected(country);\n  }\n\n  return (\n    <div id=\"dashboard\">\n      {/* <div id=\"dashboard__header\">\n        <Header />\n      </div> */}\n      <div id=\"left\">\n        <div id=\"left__info\"></div>\n\n        <Countries\n          selected={selected}\n          handleClick={handleClick}\n          data={jhuData.countries}\n        />\n      </div>\n      <div id=\"center\">\n        <Center\n          loc={selected}\n          countries={jhuData.countries}\n          worldMap={jhuData.worldMap}\n          // mapData={mapData}\n        />\n      </div>\n      <div id=\"right\">\n        <h1>{selected}: Cases, Deaths, and Vaccinations</h1>\n        <Graphs jhuData={jhuData} loc={selected} />\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import \"./App.css\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\nimport Header from \"./components/header/Header\";\n\nfunction App() {\n  return (\n    <div id=\"App\">\n      <Header />\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ffffff\"\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}